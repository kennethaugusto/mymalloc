Vallika Nayak (vn188)
Kenneth Augusto (kma234)

TO RUN:
terminal: make
will compile everything
and then do ./memgrind, ./Test1, etc.

Description of Program:
    this library is meant to be a custom version of 'malloc' and 'free' and manages memory
    it uses a structure 'metadata' to track each blocks size and contains its allocation status (0 or 1)
    methods:
        - getFreeIndex(): is called upon to find an empty spot in the memory array, gives an index with an empty 'free' block
        - myMalloc(): allocates memory of a requested size.
            either returns pointer to memory or 'null' if no space
        - myFree(): frees allocates memory. it makes available again and merges adjacent free blocks
    sequence:
        - initializes fixed-size memory block
        - call mymalloc
        - mymalloc starts to allocate memory
            - it looks for a space big enough for a requested size
            - if this space is found but bigger than needed, it will split it to just fit exactly
            - this spot is allocated as used and a pointer is returned to this block which ends mymalloc
        - if myfree is called
            - checks if pointer is valid, if it was allocated by mymalloc
            - the space is marked as free
            - it gets merged with adjacent free spaces to make bigger free blocks
        - mymalloc and myfree can be repeated as much as possible for allocating and freeing memory

Design Notes:
    - assignment started late and mymalloc.c library rewritten many times
    - this is the only version of mymalloc that was written that was giving proper test case answers but this version does not work with memgrind
    - the file memgrind.c is complete, it worked with different versions of mymalloc but not enough time to debug.
    - this design passed all test cases fit to hit edge cases as well as common cases.
    - memgrind: taskA works but everything else after is giving issues

Test Plan:
    - the test plan was very simple; design test cases that are extreme and should not work (mainly in pdf) and have some common edge cases that will work and then display the address and data

Test 1: 
    malloc(0)
Output:
    Test1.c:6:malloc: Size is 0 or smaller than 0

Test 2:
    double* p = mymalloc(sizeof(double), __FILE__, __LINE__);
    *p = 5;
    printf("address: %p, value: %f\n",p, *p);
    free(p);
Output:
    address: 0x561221e49058, value: 5.000000

Test 3:
    int i;
    for(i = 0; i < 5; i++){
        int* p = mymalloc(sizeof(int), __FILE__, __LINE__);
        *p = i;
        printf("address: %p, value: %d\n",p, *p);
    }
Output:
    address: 0x55aaa43b6058, value: 0
    address: 0x55aaa43b6074, value: 1
    address: 0x55aaa43b6090, value: 2
    address: 0x55aaa43b60ac, value: 3
    address: 0x55aaa43b60c8, value: 4

Test 4:
    int i;
    int* p = mymalloc(5 * sizeof(int), __FILE__, __LINE__);
    for(i = 0; i < 5; i++){
        p[i] = i;
    }
    for (i = 0; i < 5; i++){
        printf("address: %p, value: %d\n", p + i, p[i]);
     }
    myfree(p, __FILE__, __LINE__);
Output:
    address: 0x5641ab8ae058, value: 0
    address: 0x5641ab8ae05c, value: 1
    address: 0x5641ab8ae060, value: 2
    address: 0x5641ab8ae064, value: 3
    address: 0x5641ab8ae068, value: 4

Test 5:
    free(NULL);
Output:
    Pointer is NULL in file, free failed in FILE: 'Test5.c' on LINE: '6'

Test 6:
    int x;
    free(&x);
Output:
    Attempting to free memory that was not malloced in FILE: 'Test6.c' on LINE: '7'

Test 7:
    void* p = malloc(1);
    free(p);
    printf("p has been freed\n");
    free(p + 1);
Output:
    p has been freed
    Attempting to free memory that was not malloced in FILE: 'Test7.c' on LINE: '9'

Test 8:
    void* p = malloc(2);
    free(p);
    printf("p has been freed\n");
    free(p + 1);
Output:
    p has been freed
    Attempting to free memory that was not malloced in FILE: 'Test8.c' on LINE: '9'

Test 9:
    void* p = malloc(1);
    free(p);
    free(p);
Output:
    Attempting to free memory that was not malloced in FILE: 'Test9.c' on LINE: '8'

Test 10:
    void* p = malloc(sizeof(int));
    *((int*)p) = 5;
    printf("integer: address: %p, value: %d\n", p, *((int*)p));
    free(p);
    char* c = "Hello World"; 
    p = malloc(sizeof(char) * (strlen(c) + 1));
    memcpy(p, c, strlen(c));
    printf("String: address: %p, value: %s\n", p, (char*)p);
    free(p);
    p = malloc(sizeof(float));
    *((float*)p) = 1.2345;
    printf("float: address: %p, value: %f\n", p, *((float*)p));
    free(p);
Output:
    integer: address: 0x562858eb5058, value: 5
    String: address: 0x562858eb5058, value: Hello World
    float: address: 0x562858eb5058, value: 1.234500

Test 11:
    void* p;
    int i;
    for(i = 1; (p = malloc(i)) != NULL; i++){
        printf("%d bytes allocated\n", i);
        free(p);
    }
Output:
    1 bytes allocated
    2 bytes allocated
    ...
    4071 bytes allocated
    4072 bytes allocated
    Insufficient memory space requested (4073 bytes) in FILE: 'Test11.c' on LINE: '8'

Test 12:
    void* p;
    int i;
    for(i = 1; (p = malloc(i)) != NULL; i++){
        printf("%d bytes allocated\n", i);
    }
Output:
    1 bytes allocated
    2 bytes allocated
    ...
    68 bytes allocated
    69 bytes allocated
    Insufficient memory space requested (70 bytes) in FILE: 'Test12.c' on LINE: '8'

Test 13:
    void* p;
    int i;
    for(i = 1; (p = malloc(i % 2 == 0 ? 1 : 30)) != NULL; i++){
        printf("%d items allocated\n", i);
    }
Output:
    1 items allocated
    2 items allocated
    ...
    102 items allocated
    103 items allocated
    Insufficient memory space requested (1 bytes) in FILE: 'Test13.c' on LINE: '8'

Test 14:
    void* p;
    int i;
    for(i = 1; (p = malloc(1)) != NULL; i++){
        printf("%d items allocated\n", i);
    }
Output:
    1 items allocated
    2 items allocated
    ...
    162 items allocated
    163 items allocated
    Insufficient memory space requested (1 bytes) in FILE: 'Test14.c' on LINE: '8'


Results:

72/100

readme: 17/20 memgrind: 10/20 testing: 45/60